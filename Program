import java.math.BigInteger;

class Main {
  public static void main(String[] args) {
    //original algorthm didn't take into account that integers over 2^31 - 1; code rewritten to account for larger num (10^11 - 1)
    
    final int max = (int) (Math.pow(2, 31) - 1);
    int loop = (int) ((Math.pow(10, 11) - 1) / max);
    int remaining = (int) ((Math.pow(10, 11) - 1) % max);

    BigInteger remainder = BigInteger.valueOf(remaining);

    BigInteger num = BigInteger.valueOf(0);
    for (int i = 0; i < loop; i++)
      num = num.add(BigInteger.valueOf(max));
    num = num.add(remainder);

    String str = "" + num;
    int digits = str.length();
    
    BigInteger sum = BigInteger.valueOf(0);
    for (int i = 0; i < digits; i++) {
      BigInteger digit = num.mod(BigInteger.valueOf(10));
      sum = sum.add(digit);
    }
    System.out.println(sum);
  }
}

// no changes made
